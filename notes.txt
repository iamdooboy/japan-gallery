height: var(--slide-height);



height: var(--stack-item-height);




CSS variables
Motion can animate the value of CSS variables, and also read CSS variables as animation targets.

#Using pre-defined CSS variables in animation
HTML motion components can animate to and from CSS variables, as long as that variable is defined on a component ancestor.

<motion.li animate={{ background: "var(--action)" }} />
<motion.li animate={{ background: "var(--action)" }} />
#Animating CSS variables
By defining and animating CSS variables, we can use a parent motion component to declaratively animate multiple DOM children.

When animating CSS variables in TypeScript, the prop will need to be cast as any to prevent type errors (as there's an infinite number of variable names).

CSS variables are also of an arbitary type, so Motion can't infer their default type. You're able to animate rotate as a number because Motion understands that it should be set as deg, whereas '--rotate' needs to be explicitly set with the unit type, e.g. '360deg'.

https://codesandbox.io/s/framer-motion-layout-animations-snxgv?from-embed

When a new motion component is added, it can be automatically animated from another one by giving them both the same layoutId prop.

isSelected ? <motion.div layoutId="underline" /> : null